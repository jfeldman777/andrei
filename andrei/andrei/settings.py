"""
Django settings for andrei project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
import dj_database_url
from dotenv import load_dotenv
from pathlib import Path

import secrets
from django.test.runner import DiscoverRunner

IS_HEROKU = os.getenv('IS_HEROKU')

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv()

CSRF_COOKIE_SECURE = True
SECURE_HSTS_SECONDS = 31536000  # Set the value in seconds
SECURE_SSL_REDIRECT = True
SESSION_COOKIE_SECURE = True
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

SECRET_KEY = os.getenv('SECRET_KEY')

if not IS_HEROKU:
    DEBUG = True


if IS_HEROKU:
    ALLOWED_HOSTS = ["*"]
else:
    ALLOWED_HOSTS = ['127.0.0.1','localhost']

INSTALLED_APPS = [
    "whitenoise.runserver_nostatic",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'jacob',
    'bootstrap4',
    'jacob.templatetags',
    'crispy_forms',

]
from .middleware import AllowFrameMiddleware
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'andrei.middleware.AllowFrameMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    # ...
]
ROOT_URLCONF = 'andrei.urls'
CRISPY_TEMPLATE_PACK = 'bootstrap4'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'andrei.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        
        
    }
}

import django_heroku

#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': os.path.join(BASE_DIR, '='),
#    }
#}

#django_heroku.settings(locals())


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
 ]

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
if IS_HEROKU:
    #STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


    STORAGES = {
        # Enable WhiteNoise's GZip and Brotli compression of static assets:
        # https://whitenoise.readthedocs.io/en/latest/django.html#add-compression-and-caching-support
        "staticfiles": {
            "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
        },
    }

    WHITENOISE_KEEP_ONLY_HASHED_FILES = True
    MAX_CONN_AGE = 600
    if "CI" in os.environ:
        TEST_RUNNER = "andrei.settings.HerokuDiscoverRunner"



    # Update the default database configuration to use the Heroku-provided DATABASE_URL
#    db_from_env = dj_database_url.config(conn_max_age=600, ssl_require=True)
#    DATABASES['default'].update(db_from_env)




        
#if "DATABASE_URL" in os.environ:
#    # Configure Django for DATABASE_URL environment variable.
#    DATABASES["default"] = dj_database_url.config(
#        conn_max_age=MAX_CONN_AGE,
#        ssl_require=True,
#    )

        
import dj_database_url

# ...

# Configure the default database connection using dj_database_url.config()
# Make sure to replace 'your-database-url' with the actual database URL
# Example: 'postgres://username:password@host:port/database_name'

#DATABASE_URL = 'sqlite://../db.sqlite3'
#DATABASES = {
#    'default': dj_database_url.config(
#        default=DATABASE_URL,
#        conn_max_age=MAX_CONN_AGE,
#        ssl_require=True
#    )
#}
        
#    
#if "CI" in os.environ:
#    DATABASES["default"]["TEST"] = DATABASES["default"] 


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

#DATABASE_URL = 'sqlite://../db.sqlite3'



class HerokuDiscoverRunner(DiscoverRunner):
    """Test Runner for Heroku CI, which provides a database for you.
    This requires you to set the TEST database (done for you by settings().)"""

    def setup_databases(self, **kwargs):
        self.keepdb = True
        return super(HerokuDiscoverRunner, self).setup_databases(**kwargs)

